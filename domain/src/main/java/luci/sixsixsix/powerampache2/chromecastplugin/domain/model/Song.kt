package luci.sixsixsix.powerampache2.chromecastplugin.domain.model

import luci.sixsixsix.powerampache2.chromecastplugin.domain.common.ERROR_INT

data class Song(
    val mediaId: String,
    val id: String = mediaId,
    val title: String,
    val album: MusicAttribute = MusicAttribute.emptyInstance(),
    val artist: MusicAttribute = MusicAttribute.emptyInstance(),
    val albumArtist: MusicAttribute = MusicAttribute.emptyInstance(),
    val songUrl: String = "",
    val imageUrl: String = "",
    val bitrate: Int = ERROR_INT,
    val streamBitrate: Int = ERROR_INT,
    val catalog: Int = ERROR_INT,
    val channels: Int = ERROR_INT,
    val composer: String = "",
    val filename: String = "",
    val genre: List<MusicAttribute> = listOf(),
    val mime: String? = null,
    val playCount: Int = ERROR_INT,
    val playlistTrackNumber: Int = ERROR_INT,
    val rateHz: Int = ERROR_INT,
    val size: Int = ERROR_INT,
    val time: Int = ERROR_INT,
    val trackNumber: Int = ERROR_INT,
    val year: Int = ERROR_INT,
    val name: String = "",
    val mode: String? = null,
    val artists: List<MusicAttribute> = listOf(),
    val flag: Int = 0,
    val streamFormat: String? = null,
    val format: String? = null,
    val streamMime: String? = null,
    val publisher: String? = null,
    val replayGainTrackGain: Float? = null,
    val replayGainTrackPeak: Float? = null,
    val disk: Int = ERROR_INT,
    val diskSubtitle: String = "",
    val mbId: String = "",
    val comment: String = "",
    val language: String = "",
    val lyrics: String = "",
    val albumMbId: String = "",
    val artistMbId: String = "",
    val albumArtistMbId: String = "",
    val averageRating: Float = 0f,
    val preciseRating: Float = 0f,
    val rating: Float = 0f,
): Comparable<Song> {
    override fun compareTo(other: Song): Int = mediaId.compareTo(other.mediaId)
}